# coding: utf-8

"""
    ETSI ISG CIM / NGSI-LD API

    This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders  # noqa: E501

    The version of the OpenAPI document: latest
    Contact: NGSI-LD@etsi.org
    Generated by: https://openapi-generator.tech
"""

import unittest
import warnings
from asyncio.log import logger
from html import entities

import ngsi_ld_client
from ngsi_ld_client.api.entities_api import EntitiesApi  # noqa: E501
from ngsi_ld_client.api_client import ApiClient
from ngsi_ld_client.model.entity import Entity
from ngsi_ld_client.model.entity_fragment import EntityFragment
from ngsi_ld_client.model.entity_list import EntityList


class TestEntitiesApi(unittest.TestCase):
    """EntitiesApi unit test stubs"""

    def setUp(self):
        # https://blog.actorsfit.com/a?ID=01650-9b7dddc3-ecdc-4c94-8532-8d68581c79bd
        warnings.simplefilter('ignore', ResourceWarning)

        configuration = ngsi_ld_client.Configuration(
            host = "http://localhost:9090/ngsi-ld/v1"
        )
        api_client = ApiClient(configuration)
        api_client.set_default_header(
            header_name="Link",
            header_value='<https://fiware.github.io/data-models/full-context.jsonld>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"'
        )
        api_client.set_default_header(
            header_name="Accept",
            header_value="application/json"
        )
        self.api = EntitiesApi(api_client)

    def tearDown(self):
        pass

    def test_01_create_entity(self):
        """Test case for create_entity

        """
        payload = {
            "id": "urn:ngsi-ld:Vehicle:A100",
            "type": "Vehicle",
            "brandName": {
                "type": "Property",
                "value": "Mercedes"
            },
            "speed": {
                "type": "Property",
                "value": 80
            }
        }

        try:
            res = self.api.create_entity(
                body=payload
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 201

    def test_02_query_entities(self):
        """Test case for query_entities

        """
        try:
            res = self.api.query_entities(
                query_params={
                    "type": "Vehicle"
                }
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 200
        assert res.body[0].id == "urn:ngsi-ld:Vehicle:A100"

    def test_03_retrieve_entity_by_id(self):
        """Test case for retrieve_entity_by_id

        """
        try:
            res = self.api.retrieve_entity_by_id(
                path_params={
                    "entityId": "urn:ngsi-ld:Vehicle:A100"
                }
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 200

    def test_04_partial_attr_update(self):
        """Test case for partial_attr_update

        """
        payload = {
            "type": "Property",
            "value": 150
        }
        try:
            res = self.api.partial_attr_update(
                path_params={
                    "entityId": "urn:ngsi-ld:Vehicle:A100",
                    "attrId": "speed"
                },
                body=payload
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 204

    def test_05_update_entity_attrs(self):
        """Test case for update_entity_attrs

        """
        payload = {
            "speed": {
                "type": "Property",
                "value": 90
            }
        }
        try:
            res = self.api.update_entity_attrs(
                path_params={
                    "entityId": "urn:ngsi-ld:Vehicle:A100"
                },
                body=payload
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 204

    def test_06_append_entity_attrs(self):
        """Test case for append_entity_attrs

        """
        payload = {
            "speed": {
                "type": "Property",
                "value": 140,
                "datasetId": "urn:ngsi-ld:GPS:one"
            }
        }
        try:
            res = self.api.update_entity_attrs(
                path_params={
                    "entityId": "urn:ngsi-ld:Vehicle:A100"
                },
                body=payload
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 207

    def test_07_remove_entity_attr(self):
        """Test case for remove_entity_attr

        """
        try:
            res = self.api.remove_entity_attr(
                path_params={
                    "entityId": "urn:ngsi-ld:Vehicle:A100",
                    "attrId": "speed"
                }
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 204

    def test_08_remove_entity_by_id(self):
        """Test case for remove_entity_by_id

        """
        try:
            res = self.api.remove_entity_by_id(
                path_params={
                    "entityId": "urn:ngsi-ld:Vehicle:A100"
                }
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 204

    def test_09_batch_entity_creation(self):
        """Test case for batch_entity_creation

        """

        payload = EntityList([
            Entity({
                "id": "urn:ngsi-ld:Vehicle:first",
                "type": "Vehicle",
                "brandName": {
                    "type": "Property",
                    "value": "Mercedes"
                },
                "speed": {
                    "type": "Property",
                    "value": 80
                }
            }),
            Entity({
                "id": "urn:ngsi-ld:Vehicle:second",
                "type": "Vehicle",
                "brandName": {
                    "type": "Property",
                    "value": "BMW"
                },
                "speed": {
                    "type": "Property",
                    "value": 110
                }
            })
        ])

        try:
            res = self.api.batch_entity_creation(
                body=payload
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 201

    def test_11_batch_entity_update(self):
        """Test case for batch_entity_update

        """
        payload = EntityList([
            Entity({
                "id": "urn:ngsi-ld:Vehicle:first",
                "speed": {
                    "type": "Property",
                    "value": 140
                }
            }),
            Entity({
                "id": "urn:ngsi-ld:Vehicle:second",
                "speed": {
                    "type": "Property",
                    "value": 140
                }
            }),
        ])

        try:
            res = self.api.batch_entity_update(
                body=payload
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 204

    def test_12_batch_entity_upsert(self):
        """Test case for batch_entity_upsert

        """
        payload = EntityList([
            Entity({
                "id": "urn:ngsi-ld:Vehicle:second",
                "type": "Vehicle",
                "speed": {
                    "type": "Property",
                    "value": 100
                }
            })
        ])

        import pdb; pdb.set_trace()
        try:
            res = self.api.batch_entity_upsert(
                query_params={
                    "options": "update"
                },
                body=payload
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 204

    def test_13_batch_entity_delete(self):
        """Test case for batch_entity_delete

        """
        payload = [
            "urn:ngsi-ld:Vehicle:first",
            "urn:ngsi-ld:Vehicle:second"
        ]
        try:
            res = self.api.batch_entity_delete(
                body=payload
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 204


if __name__ == '__main__':
    unittest.main()

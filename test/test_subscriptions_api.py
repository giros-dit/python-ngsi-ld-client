# coding: utf-8

"""
    ETSI ISG CIM / NGSI-LD API

    This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders  # noqa: E501

    The version of the OpenAPI document: latest
    Contact: NGSI-LD@etsi.org
    Generated by: https://openapi-generator.tech
"""

import unittest
import warnings
from asyncio.log import logger

import ngsi_ld_client
from ngsi_ld_client.api.subscriptions_api import SubscriptionsApi  # noqa: E501
from ngsi_ld_client.api_client import ApiClient


class TestSubscriptionsApi(unittest.TestCase):
    """SubscriptionsApi unit test stubs"""

    def setUp(self):
        # https://blog.actorsfit.com/a?ID=01650-9b7dddc3-ecdc-4c94-8532-8d68581c79bd
        warnings.simplefilter('ignore', ResourceWarning)

        configuration = ngsi_ld_client.Configuration(
            host = "http://localhost:9090/ngsi-ld/v1"
        )
        api_client = ApiClient(configuration)
        api_client.set_default_header(
            header_name="Link",
            header_value='<https://fiware.github.io/data-models/full-context.jsonld>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"'
        )
        api_client.set_default_header(
            header_name="Accept",
            header_value="application/json"
        )
        self.api = SubscriptionsApi(api_client)  # noqa: E501


    def tearDown(self):
        pass

    def test_1_create_subscription(self):
        """Test case for create_subscription

        """
        payload = {
            "id": "urn:ngsi-ld:Subscription:785071301",
            "type": "Subscription",
            "entities": [
                {
                "type": "Vehicle"
                }
            ],
            "watchedAttributes": [
                "speed"
            ],
            "notification": {
                "endpoint": {
                "uri": "http://consumer:8080/notify",
                "accept": "application/json"
                }
            }
        }

        try:
            res = self.api.create_subscription(
                body=payload
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 201

    def test_2_retrieve_subscription_by_id(self):
        """Test case for retrieve_subscription_by_id

        """
        try:
            res = self.api.retrieve_subscription_by_id(
                path_params={
                    "subscriptionId": "urn:ngsi-ld:Subscription:785071301"
                }
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 200

    def test_3_retrieve_subscriptions(self):
        """Test case for retrieve_subscriptions

        """
        try:
            res = self.api.retrieve_subscriptions(
                skip_deserialization=True
        )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 200

    def test_4_update_subscription(self):
        """Test case for update_subscription

        """
        payload = {
            "notification": {
                "endpoint": {
                    "uri": "http://consumer-two:8080/notify",
                }
            }
        }
        try:
            res = self.api.update_subscription(
                body=payload,
                path_params={
                    "subscriptionId": "urn:ngsi-ld:Subscription:785071301"
                }
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 204

    def test_5_remove_subscription(self):
        """Test case for remove_subscription

        """
        try:
            res = self.api.remove_subscription(
                path_params={
                    "subscriptionId": "urn:ngsi-ld:Subscription:785071301"
                }
            )
        except Exception as e:
            logger.exception(e)

        assert res.response.status == 204

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    NGSI-LD API

    ETSI GS CIM 009 V1.6.1 cross-cutting Context Information Management (CIM); NGSI-LD API.

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from ngsi_ld_client.models.geo_query_coordinates import GeoQueryCoordinates

class GeoQuery(BaseModel):
    """
    5.2.13 represents a geoquery used for Subscriptions. 
    """
    geometry: StrictStr = Field(..., description="Type of the reference geometry. ")
    coordinates: GeoQueryCoordinates = Field(...)
    georel: StrictStr = Field(..., description="Geo-relationship (near, within, etc.). ")
    geoproperty: Optional[StrictStr] = Field(None, description="Specifies the GeoProperty to which the GeoQuery is to be applied. If not present, the default GeoProperty is location. ")
    __properties = ["geometry", "coordinates", "georel", "geoproperty"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GeoQuery:
        """Create an instance of GeoQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GeoQuery:
        """Create an instance of GeoQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GeoQuery.parse_obj(obj)

        _obj = GeoQuery.parse_obj({
            "geometry": obj.get("geometry"),
            "coordinates": GeoQueryCoordinates.from_dict(obj.get("coordinates")) if obj.get("coordinates") is not None else None,
            "georel": obj.get("georel"),
            "geoproperty": obj.get("geoproperty")
        })
        return _obj



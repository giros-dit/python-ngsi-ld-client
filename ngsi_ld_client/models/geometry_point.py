# coding: utf-8

"""
    NGSI-LD API

    ETSI GS CIM 009 V1.6.1 cross-cutting Context Information Management (CIM); NGSI-LD API.

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator

class GeometryPoint(BaseModel):
    """
    GeometryPoint
    """
    type: Optional[StrictStr] = None
    coordinates: Optional[conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)] = Field(None, description="A single position. ")
    __properties = ["type", "coordinates"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Point', 'MultiPoint', 'Polygon', 'LineString', 'MultiLineString', 'MultiPolygon'):
            raise ValueError("must be one of enum values ('Point', 'MultiPoint', 'Polygon', 'LineString', 'MultiLineString', 'MultiPolygon')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GeometryPoint:
        """Create an instance of GeometryPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GeometryPoint:
        """Create an instance of GeometryPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GeometryPoint.parse_obj(obj)

        _obj = GeometryPoint.parse_obj({
            "type": obj.get("type"),
            "coordinates": obj.get("coordinates")
        })
        return _obj



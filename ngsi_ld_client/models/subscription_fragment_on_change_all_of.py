# coding: utf-8

"""
    NGSI-LD API

    ETSI GS CIM 009 V1.6.1 cross-cutting Context Information Management (CIM); NGSI-LD API.  # noqa: E501

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, conlist

class SubscriptionFragmentOnChangeAllOf(BaseModel):
    """
    SubscriptionFragmentOnChangeAllOf
    """
    watched_attributes: Optional[conlist(StrictStr, min_items=1)] = Field(None, alias="watchedAttributes", description="Watched Attributes (Properties or Relationships). If not defined it means any Attribute. ")
    throttling: Optional[Union[confloat(ge=1, strict=True), conint(ge=1, strict=True)]] = Field(None, description="Minimal period of time in seconds which shall elapse between two consecutive notifications. ")
    __properties = ["watchedAttributes", "throttling"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionFragmentOnChangeAllOf:
        """Create an instance of SubscriptionFragmentOnChangeAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionFragmentOnChangeAllOf:
        """Create an instance of SubscriptionFragmentOnChangeAllOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionFragmentOnChangeAllOf.parse_obj(obj)

        _obj = SubscriptionFragmentOnChangeAllOf.parse_obj({
            "watched_attributes": obj.get("watchedAttributes"),
            "throttling": obj.get("throttling")
        })
        return _obj


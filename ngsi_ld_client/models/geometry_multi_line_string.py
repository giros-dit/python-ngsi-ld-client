# coding: utf-8

"""
    ietf-intefaces@2018-02-20.yang

    OpenAPI schema for the ietf-intefaces@2018-02-20.yang YANG module  supported by a model-based network device.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist, validator
from ngsi_ld_client.models.geometry_line_string import GeometryLineString

class GeometryMultiLineString(BaseModel):
    """
    GeometryMultiLineString
    """
    type: Optional[StrictStr] = None
    coordinates: Optional[conlist(GeometryLineString)] = None
    __properties = ["type", "coordinates"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MultiLineString'):
            raise ValueError("must be one of enum values ('MultiLineString')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GeometryMultiLineString:
        """Create an instance of GeometryMultiLineString from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in coordinates (list)
        _items = []
        if self.coordinates:
            for _item in self.coordinates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['coordinates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GeometryMultiLineString:
        """Create an instance of GeometryMultiLineString from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GeometryMultiLineString.parse_obj(obj)

        _obj = GeometryMultiLineString.parse_obj({
            "type": obj.get("type"),
            "coordinates": [GeometryLineString.from_dict(_item) for _item in obj.get("coordinates")] if obj.get("coordinates") is not None else None
        })
        return _obj


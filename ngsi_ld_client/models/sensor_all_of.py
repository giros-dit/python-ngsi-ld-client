# coding: utf-8

"""
    NGSI-LD API

    ETSI GS CIM 009 V1.6.1 cross-cutting Context Information Management (CIM); NGSI-LD API.  # noqa: E501

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from ngsi_ld_client.models.sensor_all_of_description import SensorAllOfDescription
from ngsi_ld_client.models.sensor_all_of_humidity import SensorAllOfHumidity
from ngsi_ld_client.models.sensor_all_of_name import SensorAllOfName
from ngsi_ld_client.models.sensor_all_of_temperature import SensorAllOfTemperature

class SensorAllOf(BaseModel):
    """
    SensorAllOf
    """
    name: Optional[SensorAllOfName] = None
    description: Optional[SensorAllOfDescription] = None
    temperature: Optional[SensorAllOfTemperature] = None
    humidity: Optional[SensorAllOfHumidity] = None
    __properties = ["name", "description", "temperature", "humidity"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SensorAllOf:
        """Create an instance of SensorAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temperature
        if self.temperature:
            _dict['temperature'] = self.temperature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of humidity
        if self.humidity:
            _dict['humidity'] = self.humidity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SensorAllOf:
        """Create an instance of SensorAllOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SensorAllOf.parse_obj(obj)

        _obj = SensorAllOf.parse_obj({
            "name": SensorAllOfName.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "description": SensorAllOfDescription.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "temperature": SensorAllOfTemperature.from_dict(obj.get("temperature")) if obj.get("temperature") is not None else None,
            "humidity": SensorAllOfHumidity.from_dict(obj.get("humidity")) if obj.get("humidity") is not None else None
        })
        return _obj


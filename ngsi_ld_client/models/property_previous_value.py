# coding: utf-8

"""
    NGSI-LD API

    ETSI GS CIM 009 V1.6.1 cross-cutting Context Information Management (CIM); NGSI-LD API.

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr, validator

class PropertyPreviousValue(BaseModel):
    """
    Previous Property value. Only used in notifications. 
    """
    type: StrictStr = Field(..., alias="@type")
    value: datetime = Field(..., alias="@value")
    __properties = ["@type", "@value"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DateTime'):
            raise ValueError("must be one of enum values ('DateTime')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PropertyPreviousValue:
        """Create an instance of PropertyPreviousValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PropertyPreviousValue:
        """Create an instance of PropertyPreviousValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PropertyPreviousValue.parse_obj(obj)

        _obj = PropertyPreviousValue.parse_obj({
            "type": obj.get("@type") if obj.get("@type") is not None else 'DateTime',
            "value": obj.get("@value")
        })
        return _obj



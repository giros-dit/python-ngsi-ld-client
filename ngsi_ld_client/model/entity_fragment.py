# coding: utf-8

"""
    ETSI ISG CIM / NGSI-LD API

    This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders  # noqa: E501

    The version of the OpenAPI document: latest
    Contact: NGSI-LD@etsi.org
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from ngsi_ld_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class EntityFragment(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    @property
    def @context(cls) -> typing.Type['LdContext']:
        return LdContext

    @classmethod
    @property
    def location(cls) -> typing.Type['GeoProperty']:
        return GeoProperty

    @classmethod
    @property
    def observationSpace(cls) -> typing.Type['GeoProperty']:
        return GeoProperty

    @classmethod
    @property
    def operationSpace(cls) -> typing.Type['GeoProperty']:
        return GeoProperty
    id = StrSchema

    @classmethod
    @property
    def type(cls) -> typing.Type['Name']:
        return Name
    createdAt = DateTimeSchema
    modifiedAt = DateTimeSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        location: typing.Union['GeoProperty', Unset] = unset,
        observationSpace: typing.Union['GeoProperty', Unset] = unset,
        operationSpace: typing.Union['GeoProperty', Unset] = unset,
        id: typing.Union[id, Unset] = unset,
        type: typing.Union['Name', Unset] = unset,
        createdAt: typing.Union[createdAt, Unset] = unset,
        modifiedAt: typing.Union[modifiedAt, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'EntityFragment':
        return super().__new__(
            cls,
            *args,
            location=location,
            observationSpace=observationSpace,
            operationSpace=operationSpace,
            id=id,
            type=type,
            createdAt=createdAt,
            modifiedAt=modifiedAt,
            _configuration=_configuration,
            **kwargs,
        )

from ngsi_ld_client.model.geo_property import GeoProperty
from ngsi_ld_client.model.ld_context import LdContext
from ngsi_ld_client.model.name import Name
